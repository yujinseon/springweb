2022-02-24
# 전날 복습
[1단계:개념] 1. 웹프로그래밍에서 세션을 활용하는 경우를 기술하세요
	1) 로그인 후, 회원 정보(아이디, 이름, 권한, 포인트)를 가지고, 각 페이지별/기능버튼별로
		로그인 여부와 권한에 따른 접근 처리를 할 수 있다.
	2) 임시로 장바구니나 쇼핑카트에 결재전에 특정한 데이터를 가지고 있다가 결재 후에는 DB로
		처리 하게 할 때, 활용된다.

[1단계:코드] 2. 스프링에서 세션처리를 위한 핵심 선언을 기술하세요.
	컨트롤단  
	선언 : @SessionAttributes("세션명")
	모델객체
	@ModelAttribute("세션명")
	public 객체 get객체(){
		return new 객체();
	}
	기능메서드 
	public String 메서드명(@ModelAttribute("세션명") 객체 참조){
	
	}
[1단계:코드] 3. 로그인 인증/미인증 메세지와 세션여부를 확인하는 js 처리를 기술하세요.
	controller단에서 모델 데이터로 선언
		public String login(@ModelAttribute("member") Member login, Model d){
			Member mem = service.login(login); // DB를 통해 member가 있는지 여부를 확인, VO객체를 받음.
			if(mem!=null){ //데이터가 있는 경우
				d.addAttribute("loginMsg", "로그인성공");
				d.addAttribute("member", mem); //session 값 DB가져온 데이터로 재 설정
			}else{
				d.addAttribute("loginMsg", "로그인실패");
			}
		}
	view단에서 js로 선언..
		var msg = "${loginMsg}"
		if(msg!=""){
			alert(loginMsg);
		}
		var hasSession="${member.name}" 
		// id, pass는 기본적으로 login할때 있으므로 DB에서 가져온데이터를 기준으로 설정처리.
		// 세션값이 있는지 여부를 확인
		if(hasSession==""){
			alert("로그인이 필요합니다");
			// 로그인 다이얼로그 연동되어 있는 요소객체 강제 수행.
			$("#loginDialogue").click();
			//location.href="${path}/board.do?method=loginFrm";
		}

[1단계:개념] 4. 세션check부터 시작하는 session을 활용한 DB연동 로그인 및 권한 처리 코드를 개발순서와 핵심코드를 기술하세요.
	1) 초기화면 session check(view)
		var hasSession="${member.name}" if(hasSession=="")
	2) controller 구현
		공통 session, model 선언
		msg 선언 
	3) DB처리
		sql
		vo
		dao/mapper
		service
		controller 넘겨온 VO객체 설정
		view
			화면단 login메서지 및 session 유효성 check
				


 ~9:40

# 주요학습범위
1. 게시판의 답변형 데이터 처리

# 생각해봅시다.
1. 계층형 sql이란 무엇인가?
	emp 테이블의 empno와 mgr과의 관계와 같이 테이블내부에 컬럼간의 계층적인 관계를 가지고 있을 때를 말한다.
	board의 no/refno : 글과 답글 관계로 처리되어 있다.
	기본 메인 글 하위에 답글을 처리하여, 계층적으로 표현할 때, 활용된다.
2. 페이징 처리를 위한 속성값은 어떤 것이 있는가?
	 한번에 보여줄 페이지를 지정하여 데이터를 처리하는 방식으로 DB서버의 부하를 줄여 준다.
	 최종적 sql로 고유번호인 rownum between 시작번호 and 마지막번호
	 cd) rownum  : oracle에서 내장된 행단위 count를 말한다.
	count : 전체 데이터 총건수
	pageSize : 한페이지당 보여줄 데이터 건수
	pageCount : 총 페이지수
	curPage : 현재 클릭한 페이지 번호 - 하단에 [1][2][3][4]
	start : 해당 페이지를 클릭했을 때, 최상단의 번호		
	end : 해당 페이지를 클릭했을 때, 최하단의 번호
	blockSize : 하단에 나타날 block의 갯수    << [1] [2] [3] >> ==> 좌우로 클릭하는 화살표와 함께
		한번에 보이는 페이지 block의 갯수 이 경우 3개이다.
	startBlock : 페이지 block 에서 왼쪽에 나오는 시작 block 번호
			<< [4] [5] [6] >>
	endBlock : 페이지 block에서 오른쪽에 나오는 마지막 block 번호	
			
# 학습목표
1. 게시판의 답글을 처리하는 과정을 이해하고, 계층형 sql을 작성할 수 있다.
2. 페이징 처리에 필요한 속성과 form 요소객체와의 관계를 이해하고 페이지 처리로직을 안다.

 	
# 주요핵심 keyword
start with  조건  : 계층적 sql의 최상위 root 조건 지정
connect by prior 상위컬럼=하위컬럼
order siblings by 컬럼명   : 계층적 sql의 정렬 기준..
rownum

# 주요 진행계획(학습 단계별 체계화)
1. 학습지침 
	1) 전체 핵심 내용을 이해하고, 간단한 코드로 확인한다.
	2) 각 내용을 내용 계열화를 통해 연관되어 이해를 한다.
	3) 세부 내용을 기능 메서드의 기능을 확인하고 진행한다.
	4) 조원들과 내용에 대하여 이야기 하면서 진행한다.
	5) 수업 진행에 중점, 조별과제 진행
	
2. 발표 전날 내용 리뷰, 정리 과제 풀이
   오늘 주요 내용/개념 및 핵심 코드 확인	

3. 16시 - 조별 피드백
4. 17시 - 내일 발표 자료 전달, 정리 조별과제 진행 회의, 질문사항

# 추후 일정
1. 서버 구축
	1) 클라우드 환경 서버 구축
		aws
		
2. 프런트 단 : vue
3. 스프링 수업
	- dynamic web project : 스프링 환경
	- 기타 실무 예제
		파일업로드/다운로드(완료)	
	    게시판(파일업로드, 답변, 페이징처리)
		ajax 처리 : fullcalendar(jquery lib)
		채팅
		다국어 처리
		aop
		배치프로그래밍
	- 스프링 boot(아래내용 선택)	
		vue 환경 게시판 예제 진행
# 요청사항 진행
1. 수업 속도 - 현재 속도 유지
	- 조별로 완료가 되지 않았더라도 지금 정도는 진행되어야 할 때, 손들기로 변경

# 조별과제 진행 점검
1.  진행 플로우 점검
	- 전체
	- 주단위
		전주(금) - 다음 주 진행할 일정계획 및 담당자 확인,
				  발표 feedback 사항 및 변경 및 개선사항 정리
				  진행에 필요한 내용 점검(조장/조원), 진행 계획 수립
		월 - 개선사항 적용 템플릿 점검(조별활동시간)
			text로 개선사항 내용과 함께 ppt의 페이지를 표기해서 전달 부탁드립니다.
		화 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    수 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    목 - 최종 발표 및 산출물(소스 및 진행 내용) 자료 제출
	    금 - 발표/발전사항 점검

# 평가/정리
- 다음 날 진행.



