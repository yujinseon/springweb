2022-03-11
# 지난시간 복습
[1단계:개념] 1. 메일 발송과 수신되는 서버를 기술하세요.
	클라이언트(스프링단) ====>  메일서버(POP-수신서버/SMTP-발신서버)
	클라이인터(대상자)  <====  						
		
[1단계:개념] 2. 스프링에서 메일이 발송되게 하는 개발 환경을 기술하세요
	메일 서버 - 발신이 될 수 있도록 보안 부터 check
	컨테이너 - 메일 발신서버에 대한 bean 객체 선언
			JavaMailSenderImpl
				host, port, username, password, javaMailProperties 설정

[1단계:개념] 3. 메일 발송처리를 위한 controller과 service단 화면단 구현 순서와 핵심 코드를 기술하세요
	초기화면 호출 및 구성 : controller, view(jsp)
	초기화면 form(jsp) : 발신자, 수신자, 제목, 내용, 기타
	VO 객체 생성 : 요청값을 받은 VO 객체 만들기
	메일 발송 처리(controller, service)
		요청값으로 controller 선언
		메일발송 service단 구현
			container의 JavaMailSender 호출.
			MimeMessage : 멀티미디어 메일 데이터 전송을 위한 선언.
			setSubject : 제목
			setRecipient : 대상자 - 수신, 발신, 참조
			setText : 내용
			sender.send(메시지)
~09:20

# 주요학습범위
1. 스프링 boot와 vue를 연동하는 게시판 조회화면

# 생각해봅시다.
1. 스프링 boot의 화면단(view)과 데이터 베이스의 설정 방식은 무엇이 있을까?
	- 특정한 패키지와 이름으로 자동 container 등록이 가능
	- mybatis mapper 설정, view단의 호출 처리 부분..
	- 
2. 스프링 boot와 vue는 어떤 방식으로 데이터를 처리하는가?
	- 스프링 boot의 java와 mapper를 통해서 backend 처리
	- resources 하위에 templates와 static를 통해서 view단 html js, css 설정
	- ajax방식으로 backend단 데이터 처리..	

3. vue의 이벤트 버스란 어떤 작용하는 하는 것인가?
	- 컴포넌트간에 데이터 전송 
		emit, on을 이벤트 방식으로 데이터 전송처리.

# 학습목표
1. 스프링 boot 환경에서 vue와 연동하는 기본적인 데이터 처리방식을 이해한다
2. vue의 계층형 컴포넌트와 데이터 처리 관계를 이해하고 코딩할 수 있다.

 	
# 주요핵심 keyword

# 주요 진행계획(학습 단계별 체계화)
1. 학습지침 
	1) 전체 핵심 내용을 이해하고, 간단한 코드로 확인한다.
	2) 각 내용을 내용 계열화를 통해 연관되어 이해를 한다.
	3) 세부 내용을 기능 메서드의 기능을 확인하고 진행한다.
	4) 조원들과 내용에 대하여 이야기 하면서 진행한다.
	5) 수업 진행에 중점, 조별과제 진행
2. 지난 내용 리뷰
3. 프로젝트 발표 09:30
	- 자료/소스/기술 내역 공유(협의사항)
		해당 조를 통해 요청시 적극 협조 바랍니다.
	- 피드백
	- 발전사항 정리
	- 초기화면 구성
	# 공통 피드백 사항.
	1. 초기화면
		프로젝트명(이름 PMS), 이미지, 
		@@@ 소속과 @@@조.
	2. 핵심기술
		업무위주보다 프로그래밍 기술 
			- 스프링 MVC, ajax, vue, fullcalendar api 활용
			내용과 실제 적용 화면 소스
	3. 화면설계서 양식은 준수
	4. 각 항목별 왼쪽 INDEX 가독성, 상단에 가끔한 타이틀 표기.
	
	
5. 평가진행 14:00~
6. 프로젝트 진행 14:00~
	# 프로젝트 1주차 진행 범위(~17:00 제출)
	- 주제 선정/역할 분담/일정계획 전달
	- 요구사항 정의서/화면설계서/DB설계-erd 작성
	- 기본 환경 설정(초기 메인화면)
		부트스트렙 템플릿 선정
		스프링 연동 환경 설정

# 추후 일정
1. 서버 구축
	1) 클라우드 환경 서버 구축(완료)
		aws	
2. 프런트 단 : 
	vue - 기본
	
3. 스프링 수업
	- dynamic web project : 스프링 환경
	- 기타 실무 예제
		파일업로드/다운로드(완료)	
	    게시판(파일업로드, 답변, 페이징처리)(완료)
		# ajax 처리 : fullcalendar(jquery lib)(완료)
		# 메일 전송 (완료)
		# 채팅
		# 다국어 처리
		aop
		배치프로그래밍
		aws 활용 실무 - 리눅스 환경, 기타 인스턴스 객체
	- 스프링 boot
	    타임리프 - emp 조회 처리(완료)	
		vue 환경 게시판 예제 진행
			- 1순위 emp리스트
# 요청사항 및 협의사항 진행
1. 프로젝트 진행시 수업시간 및 내용 결정
	- 나머지 수업 진도 (오전 진행)
	- 추후 시간, 과목과 내용(협의 진행)


# 조별과제 진행 점검
1.  진행 플로우 점검
	- 전체
	- 주단위
		전주(금) - 다음 주 진행할 일정계획 및 담당자 확인,
				  발표 feedback 사항 및 변경 및 개선사항 정리
				  진행에 필요한 내용 점검(조장/조원), 진행 계획 수립
		월 - 개선사항 적용 템플릿 점검(조별활동시간)
			text로 개선사항 내용과 함께 ppt의 페이지를 표기해서 전달 부탁드립니다.
		화 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    수 - 조별 상세 피드백(설계, 코드, 발표 자료 등)
	    목 - 최종 발표 및 산출물(소스 및 진행 내용) 자료 제출
	    금 - 발표/발전사항 점검
# 평가/정리
- 다음 날 진행.

# 공지
1. 프로젝트 기본 일정
	1) 주요 지침
		- 매주 조별 코드리뷰/단위테스트 진행, 진행 내용 및 일정계획 발표
			회의록, 근거 자료 정리
		- 리스크(일정지연/에러 등) 관리 - 매일 진척내용 확인
		
	2) 핵심 목표
		- 핵심 기술
			스프링/스프링부트, 타임리프(완료), vue 
			ajax(json데이터 처리), jquery lib 활용(차트, #월별 일정관리 등)(완료)
			게시판(완료)
			세션별 권한 처리(완료)
			#메일발송
			#채팅
			업무결재시스템 - 프로세스를 단계별로 처리
			#다국어 처리
	3) 주요 지침
		- 일정 마일 스톤을 반드시 지킨다. 매주 발표, 매일 진행 feedback 받을 수 있도록 일정 잡기	
			계획/진행/점검 및 대안
		- 리스크가 있을 시, 사전에 이야기하고 해결할 수 있도록 한다.			
		- 개인별로 조별로 일정을 효과적으로 진행할 프로세스를 만들어 진행한다.
		- 매주 진행 내용에 대한 코드리뷰/단위테스트를 하고 해당 내용을 근거자료를 만들어서 발표시 나타낸다.
		- 주차별 주된 내용을 기준으로 통합해서 진행
			설계, 프런트단, 백앤드단, 문서 작업 등을 병행하면서 진행할 수 있도록 한다.
		- 데이터를 반드시 의미있는 데이터를 입력 해서, 진행하도록 한다.
			충분한 데이터 입력하여 화면구성을 확인할 수 있도록 한다.
		- 조별로 협의된 사항 ex) 소스자료 공유/기술 공유/ppt 발표자료 공유	
							
	4) 주차별 일정 계획
		- 1주차 설계/분석/공통모듈
			일정계획, 프로젝트 ppt 템플릿(항목), 개발 환경구축
		- 2주차 설계분석, 프런트단  
		- 3주차 백앤드
		- 4주차 백앤드
		- 5주차 정리/통합테스트(조별로 크로싱테스트)
			- 각 조별로 통합테스트 시나리오 작성하여 테스트를 한다.
			- 최종리허설/최종발표			

# 마지막 프로젝트 주요 목차(ppt)
1. 프로젝트 소개
	- 개요
	- 범위
	- 개발환경
	- 핵심기술
		주요기술 소개 및 적용 내용(소스 및 화면 캡쳐)
2. 팀소개	
	- 역할분담
	- WBS 
3. 설계
	- 요구사항정의서
	- DB
	- 화면설계 : 유효성, 권한 표기
4. 구현
	- 구현된 화면, 소스코드
5. 테스트
	- 단위테스트
	- 통합테스트
6. 진행산출물
	- 일정계획 및 진행 결과
	- 회의록
7. 최종 발전사항 



		
	





