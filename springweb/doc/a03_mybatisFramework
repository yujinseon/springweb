# 스프링에서 DB 연결 처리..
1. 기본 개념
	스프링 컨테이너에 DB서버와 연결처리해주는 Dao를 생성해주는 객체를 선언하여 처리한다.
	1) 연결하는 객체 
	2) 연결 후, 공통파일
	3) Dao 인터페이스가 있는 폴드를 지정
2. mybatis공통 설정파일 (xml)
	1) 사용하게 될 vo를 별칭으로 선언하기
	2) 각 업무 단위를 나타내는 XXXMapper.xml 선언하기

3. 학습 내용 계열화
	1) 인터페이스로부터 객체 호출 개념 이해.
		- 인터페이스 개념
		- 인터페이스 활용
		- 인터페이스의 컨테이너사용
		
		# mybatis에서 실제 객체가 만들어지는 개념에 대한 이해
		
	2) 데이터베이스의 접근을 위한 환경 이해
		# DB connection 부분
			드라이버
			DB 서버 정보(ip, port, sid, 계정/비번)
		# mybatis sql의 처리를 위한 방법 이해
			컨테이너 안에서 프레임웍에 있는 객체를 생성 활용
			xml
			실제 dao(repository 객체)
	3) 개발 순서 이해과 실습
		sql 작성
		vo 작성(입력, 리턴)
		기능 메서드 선언(인터페이스)
		공통설정 파일 변경(mybatis.Spring.xml)
			- vo객체의 alias 
			- XXXMapper.xml을 지정..
			
		XXXMapper.xml의 작성
		- 기능 메서드와 연동할 수 있게 처리
			id, parameterType, resultType
		- 입력받는 매개변수 처리와 리턴할 객체 선언.
		service단 repository 호출
		controller단 service 호출 및 model 데이터 선언
		view단 model 호출 및 출력
	4) 테스트 및 주로 나오는 에러에 대한 대비	
		
		
# 사원정보 리스트 예제 같이 해보기..
1. sql
	select *
	from emp02
	where ename like '%'||''||'%'
	and job like '%'||''|'%';
	
	
2. vo 작성(입력/리턴값)
	springweb.vo.Emp
	
3. 인터페이스 선언
	1) 스프링 컨테이너에서 dao 패키지 위치 선언..
	2) 인터페이스 EmpDao
	3) 메서드 public ArrayList<Emp> empList(Emp sch);
	// springweb.a02_mvc.a03_dao.A01_EmpDao
	// ArrayList<Emp> getEmpList(Emp sch);	
	
4. 공통 mybatis 선언(resource/mybatis.Spring.xml)
	1) vo의 alias 선언
	2) XXXMapper.xml 위치 선언.
5. XXXMapper.xml 생성과 선언
	선언된 dao인터페이스와 연동
6. service단 호출.
	a02_service 하위에 A01_EmpService.java


7. controller단 호출
	model 데이터 처리
8. view단 작성.
	요청값
	모델데이터 처리 및 출력
	
# mybatis의 dao와 XXXMapper.xml 처리 연습
1. sql
	select count(*) cnt
	from emp02
	where deptno = @@
	ex1)
	select count(*) cnt
	from emp02
	where job like '%'||''||'%';
	ex2)
	select *
	from emp02
	where empno = @@@; primary key인 empno를 통해서 시별하여 단일 행데이터를
		나타날때 사용..
	
2. dao
	public int getCount(int deptno);
	public int getJobCount(String job);
	public Emp getEmpDetail(int empno);
	// 한row의 여러유형의 데이터를 처리할려면 필요한 내용?
3. XXXMapper.xml
	<select id="getEmpDetail" resultType="emp" parameterType="int">
		select *
		from emp02
		where empno = #{empno}		
	</select>


	<select id="getCount" parameterType="int" resultType="int">
	select count(*) cnt
		from emp02
	where deptno = #{deptno}		
	</select>
	<select id="getJobCount" parameterType="String" resultType="int">
		select count(*) cnt
		from emp02
		where job like '%'||#{job}||'%'		
	</select>
					 
4. start.do를 통해 에러없이 나오면 정상 처리된다.
	
# Dao와 연동하는 XXXMapper.xml 
1. 기본메서드 형식
	public ArrayList<VO> getVo(Vo sch);

2. 기능 리턴데이터에 따른 mapper.xml의 처리형식
	0) 핵심 속성 : resultType="@@"
	1) 단일데이터
		기본데이터/String유형
			byte,int,short,long...
			# sql
			select count(*) cnt from
			select avg(sal) asal from 
			select ename from 
			# dao
			public int totCount();
			public double avg();
			public String getEname();
			# mapper.xml
			<select id="totCount" resultType="int"
			<select id="avg" resultType="double"
			<select id="getEname" resultType="string"
		객체유형
			Vo(여러가지 속성)
			# sql
			select ename, job, sal from 
			select * from dept
			# dao
			public Emp getEmp();
			public Dept getDept();
			# mapper.xml
			<select id="getEmp" resultType="emp"
			<select id="getDept" resultType="dept"
	2) 다중데이터
		행이 여러 개가 나오는 데이터 유형을 말한다.
		단일 컬럼에서 여러개의 행데이터가 리턴되는 경우
			sql :select ename from emp where deptno = 10;
			dao : public List<String> getEnames(int deptno);
				  public String[] getEnames(int deptno);
			mapper.xml
			<select id="getEnames" resultType="string" parameterType="int">
		 3조 제출, 손들기.A01_EmpDao.java	
		EX) 
		-- 직책에 따른 사원 번호 출력
		SELECT empno
		FROM emp
		WHERE job = 'SALESMAN';
		4조 제출, 손들기.
		
		여러 컬럼에서 여러 개의 행데이터가 리턴되는 경우가 있다.
		select * 
		from emp
		where deptno=@@
		dao : public List<Emp> geEmpList(int deptno);
		mapper.xml
			<select id="getEmpList" resultType="emp" parameterType="int">
				select * 
				from emp
				where deptno=#{deptno}			

		# resultMap 활용하기.
		1. key나 기타 column 명과 property가 다르게 설정하여 사용할 경우에
			활용한다.
		2. 처리 순서.
			1) 	resultMap 기본 vo와 연동하여 선언.
				ex) <resultMap id="empRsult" type="emp">
						<result column="" property=""
			2) <select resultMap="선언된resultMap아이디">

# 매개변수 데이터 처리하기
1. 단일데이터 매개변수 처리..
	public Emp getEmp(int empno);
	<select id="getEmp" resultType="emp" parameterType="int">
	
2. 2개이상 데이터 입력..
	select 
	from emp
	where mgr = #{mgr1}
	and deptno = #{deptno}
	
	public Emp getEmp_mgr_deptno(@Param("mgr1") int mgr, @Param("deptno") int deptno);	
	


	 	
	
	
			