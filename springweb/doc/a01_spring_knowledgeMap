# 스프링의 지식체계 계열화
1. 환경설정에 대한 이해
	- view :
		front단 처리 
		jquery + bootstrap

2. 스프링의 기본적인 처리 순서.
	http://locahost:7080/springweb/start.do
	web.xml ==> front 컨트롤단(*.do) DispatcherServlet 
		dispatcher-servlet.xml(사용할 객체가 메모리에 로딩된 스프링 컨테이너 선언)
		 ==> controller(RequstMapping("@@@.do")선언된 메서드 호출 ==> view 호출..
	웹서버를 기동하고, 브라우저 주소값을 입력하고 서버에 접속할 때, web.xml에
	가장 먼저 접근한다.
	web.xml에서 설정한 내용을 기동한다.
	1. 초기 default 화면 로딩 : <welcome-file-list>
		http://localhost:7080/springweb/ 으로 호출되는 파일 순서 리스트
	2. front controller 설정
		*.do 끝나면 스프링 프레임워크 환경으로 호출되게 설정
		DispatcherServlet ==> 사용자정의 controller를 호출.
	3. DispatcherServlet 선언과 함께, WAS로 통해 사용할 객체들과 설정 내용을
		dispatcher-servlet.xml 안에 선언하고, 이 선언된 내용을 
		첫번째 url을 호출할 때, 메모리에 로딩 된다.
	4. 메모리에 로딩된 객체들 중에 url 패턴이 맞는 controller 안에 기능 메서드를 호출한다.
		1) 요청하는 url
			서버내용 동일한 url pattern을 설정하면 에러가 발생한다.
			@RequestMapping("/start.do")
		2) 요청값 즉, query string에 대한 처리
		3) model 데이터 설정 처리
		4) 호출한 view을 forward방식으로 호출
			cf) redirect방식과 forward 방식의 차이..
				redirect : request,response 객체를 포함시키지 않고 호출하기에	
						모델데이터를 처리할 수 없다.
				forward : request, response 객체를 포함시키면서 호출하기에 
						요청값, 모델데이터를 처리할 수 있다.
		@RequestMapping("/start.do")
		public String start() {
			return "WEB-INF\\views\\a01_springStart.jsp";
		}		 
		주의) WEB-INF는 보안 폴드이기에 직접적인 호출은 불가능하게 되어 있다.
			스프링의 경로 보안을 위해 controller 단위 url를 통해서만 view단이 호출되게 처리
			이렇게 함으로 주소를 통해 view단을 직접적으로 접근하는 것을 차단해준다.
			
	
	
	1) 스프링 MVC 초기화면 호출.
		- controller 생성
			- urlpattern 설정, 기능메서드 호출.
			- @Controller 설정.
			- model 데이터,
			- view단 호출.
		- dispatcher-servlet.xml에 controller 등록
		- view단 모델 데이터 호출..
		- controller에 설정되어 있는 url 패턴으로 호출하여 화면 로딩 처리..
3. DI에 대한 이해 및 처리.
	dispatcher-servlet.xml의 스프링에서 사용되는 컨테이너 메모리의 사용방법을
	xml파일과 main()메서드가 있는 클래스를 통해 연습한다.
	이 후, 전체 컨테이너 설정 및 활용을 하고자 한다.
	
	
	1) autowiring 
		- 컨테이너 안에 있는 객체들 간에 연관관계를 설정해놓았을 때, 자동으로 할당되어 사용할 수 있게 하는 것을
			말한다.
		- 컨테이너에서 선언 - autowire="byType/byName"
		- <context:annotation-config/>를 통해, 소스내에서 autowiring 처리	
	2) 특정한 패키지단위 자동 객체 로딩
		- 컨테이너에 선언되어 사용할 객체를 class선언시, 사용되는 package단위로 설정하여 사용할 수 있다.
			<context:component-scan base-package="a01_diexp.vo3"/>
	3) autowiring 개념과 component-scan을 조합하여, 특정한 패키지에 filter객체를
		선언하면, 객체의 등록과 함께 자동 autowiring 개념으로 dependency injection
		(의존성주입)을 자동으로 처리할 수 있다.	
	
	
4. spring MVC 
	1) controller 호출 방식
		- url 패턴/get/post방식에 따른 호출
		- 요청값 처리 - @RequestParam(), Vo객체(property), ModelAttribute(요청값 + 모델데이터처리)
			?name=사과&price=2000
		- 모델데이터 처리
			addAttribute("모델명",모델객체/모델값)
		- 뷰단호출 - jsp, json, 파일다운로드
	2) model 처리
		- controller ==> service ==> dao ==> XXXMappper.xml 을 통해서 요청값을 넘긴 후, 다시 (매개변수 전달)
			service.selectList(sch)
		- XXXMapper.xml ==> dao ==> service ==> controller 모델 데이터 설정.(리턴값을 통해서 전달)
							public ArrayList<List>
	3) view단 처리..
		- form 하위 요소객체 : 입력을 통해 요청값 처리(query string)
			<form action="컨트롤단url매핑">
		- table 리스트 처리 : 모델데이터를 통해서 el/jstl을 활용하여 출력 처리
		- css/html 화면 구성
		- js, jquery를 통해서 유효성 check, 동적인 이벤트 처리..
	
	4) 

5. database 처리를 위한  mybatis framework 활용
	1) dao, mappper 연결 규칙 알기..
		# dao
		interface EmpDao{
		public ArrayList<Emp> empList(Emp sch);
		# XXXMapper.xml
		<mapper namespace="패키지명.EmpDao"
		<select id="empList" parameterType="emp" resultType="emp"
		    패키지명+인터페이스명 = namespace 속성
			메서드명 = id 속성값
			매개변수 객체(Emp sch) = parameterType 속성값
			리턴 객체(ArrayList<Emp>) = resultType 속성값 
		
	2) dao 인터페이스의 내부적인 결과 생성과정에 대한 이해.
		XXXXMapper.xml + interface  ==> 실제 객체가 mybatis를 통해서 만들어 진다.
		EmpDao empdao = new EmpDaoObj();  상위 추상 인터페이스 = 하위 실제 객체() : 다형성 처리
		class EmpDaoObj implements EmpDao{
		
		
		}

6. AOP


7. 기타 실무 예제..
	파일업로드
	ajax 처리 : fullcalendar(jquery lib)
	채팅
	다국어 처리
	배치프로그래밍
	게시판(파일업로드, 페이징처리, 무한레벨 답글 작성(계층 구조 데이터)) 


# 스프링 기본 호출 처리.
1. controller 클래스 만들기
2. @Annotation Controller 설정.
3. dispatcher-servlet에 controller 등록하기..
4. @RequestMapping("/gogo2.do")
   함께하는 기능메서드 선언 : 주의	/gogo2.do 기존의 이름이 아니어야 한다.
5. 메서드 선언.
	public String 메서드명(){
		return "리턴할 view";
	}   
6. 요청값 형식 설정
	?name=himan&pass=7777&age=25
	public String 메서드명(@RequestParam("name") String name,
					     @RequestParam("pass") String pass,
					     @RequestParam("age") int age
					      
		){	
	
	요청값은 매개변수로 @RequestParam("요청키") 받을데이터유형 변수명
7. 위 url + 요청값으로 호함해서.
	http://localhost:7080/springweb/gogo2.do?name=himan&pass=7777
	으로 해서 위의 기능 메서드를 호출하여 처리한다.
	
	
# 보강 계획
1. 스프링 로딩 구조에 대한 이해
	url ==> web.xml ==> controller 호출 화면에 출력.

	http://localhost:7080/springweb/start.do
	
	web.xml에서 *.do에 연계되어 있는 front 컨트롤러인 
	DispatcherServlet 호출하고, 이 내용에 설정 파일인 dispatcher-servlet.xml를 호출하게 된다.
	dispatcher-servlet.xml : 스프링 컨테이너(수영장)
		- 기본적으로 코딩할 패키지는 특정한 @Controller/@Service/@Repository가 있을 때, 메모리로 로딩처리
		- 사용할 객체들을 스프링 컨테이너에 로딩되어서 사용된다.
	메모리에 로딩 객체들 중에  url 패턴을 찾아서 해당 컨트롤러나 메서드를 호출한다.
		/start.do	
		@RequestMapping("/start.do")	  
		@GetMapping("/start.do")	  
		@PostMapping("/start.do")
		메서드의 경우 아래와 같은 형식을 가지고 있다.
		public String start(@RequestParam("요청키") String name, Model d){
			return "view(jsp)호출";
		}
		마지막 return으로 연결되어 있는 jsp 패이지를 호출한다.
		
	ex) 과제1 springweb/exp/ 포드하위에 A01_CtrlExp01.java를 만들고  
		/call100.do를 통해서  views/exp/call100.jsp 화면을 로딩하세요.
			  
	

2. 스프링 MVC 처리 방법
	1) 요청값이 들어 왔을 때, url 매핑되는 controller 호출.
		요청값 : 화면에 form객체를 통해서 데이터를 입력되거나 호출 될때
		사용하는 값.
		http://localhost:7080/springweb/gogo3.do?name=홍길동&age=25
		<input name="name" value="홍길동">
		
		public String start(
			@RequestParam("name") String name,
			@RequestParam("age") int age
		)
		객체로 받는 처리
		public String start( Person p )
			Person 객체 안에 setName(String name), setAge(int age)			
	2) model 데이터 처리
		public String start(Model d){
			d.addAttribute("모델명","모델값")
			변수1
			객체
			배열
		}	
	
	3) view 호출(jsp)
			${모델명}
	
3. 컨테이너에 대한 이해 객체 생성, autowiring 처리 내용을 진행.(****)
4. 최종적으로 dispatcher-servlet에서 설정된 내용 위주로 설명..

	ex) 과제1 springweb/exp/ 포드하위에 A01_CtrlExp01.java를 만들고  
		/call100.do를 통해서  views/exp/call100.jsp 화면을 로딩하세요.
	ex) 과제2 springweb/exp/ 포드하위에 A01_CtrlExp01.java를 안에서
		/call101.do?num01=25&num02=30를 통해서  
		요청값을 받아서 출력하게 하세요 views/exp/call101.jsp 화면을 로딩하세요.
	ex) 과제3 springweb/exp/ 포드하위에 A01_CtrlExp01.java를 안에서
		/call102.do?tname=현대&pname=김호철&records=0.321를 통해서  
		요청값을 객체로 받아서 출력하게 하세요 views/exp/call102.jsp 화면을 로딩하세요.
	ex) 과제4 springweb/exp/ 포드하위에 A01_CtrlExp01.java를 안에서
		/call103.do 를 통해 모델 데이터를 변수, 객체, 리스트 형 배열을 선언하여
		화면(view)에 출력 되게 하세요
		요청값을 객체로 받아서 출력하게 하세요 views/exp/call103.jsp 화면을 로딩하세요.
	
# 스프링의 핵심 이해
1. 서버와 클라이언트단의 데이터 전송 및 출력

	클라이언트(브라우저) =======>  서버(톰캣)
	1) 브라우저의 url 주소를 통해 /start.do 라는 urlmapping 주소를 호출하면
	2) 서버는 해당 url 주소에 /start.do로 연결되어있는 jsp를 출력한다.
		http://localhost:7080/springweb/start.do
		@RequestMapping("/start.do")
		public String start(){
			return "@@@@/call.jsp");
		}
	3) 마지막에 호출된 jsp를 html로 최종적으로 변경되어, 서버에서 브라우저로
		전달되어 브라우저 화면에 출력된다.
	4) 화면에서 아래와 같이 데이터를 서버에 전달할 내용이 있으면
		url 주소와 요청값이 전달되어 진다.
		id:[   ]
		pass:[   ]
		[로그인]
		<form action="${path}/login.do"
			<input name="id">
			<input name="pass">
	5) 위 action 주소와 input값에 입력된 내용은 login.do?id=himan&pass=7777
	6) 컨트롤러 호출 
		@RequestMapping("/login.do")
		public String login(Member m, Model d){
			 m.getId() : himan	
			 m.getpass() : 7777
			 d.addAttribute("member",service.getMember(m));	// service, dao, mapper.xml
			// 데이가 있으면 member라는 모델데이터에 객체가 들어 간다.
			d.addAttribute("login", "로그인성공");
			return "@@@@/main.jsp");
		}	
	7) main.jsp
		js에서 모델 데이터 받기..
		var login = "${login}";
		<table>
			<tr><td>회원아이디</td><td>${member.id}</td></tr>	
			<tr><td>회원명</td><td>${member.name}</td></tr>	
			<tr><td>권한</td><td>${member.auth}</td></tr>
# 파일업로드 처리
1. 처리프로세스
	첨부파일을 추가해서 전송하면
		<form>
		<input type="file"/>
	서버에서 받아서
		controller단에서 Multipart객체를 통해서 받아서
		
	특정한 파일서버의 위치에 저장 처리한다
		MultiPart 객체를 File객체로 변환하여 지정한 파일 서버에 저장 처리
2. 개발 순서
	1) 컨테이너에 파일업로드 처리하는 객체 등록, 파일저장위를 conf로 설정
	2) controller에서 해당 file객체의 이름을 Multipart파일 객체로 받아서
	3) service단에 특정한 위치에 저장	



	